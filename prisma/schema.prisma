// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  phone         String?
  role          UserRole  @default(MEMBER)
  emailConfirmed Boolean  @default(false)
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  membro        Membro?
  sindicato     Sindicato? @relation("SindicatoAdmin")
  convites      Convite[] @relation("CriadoPor")
  
  @@map("users")
}

model Sindicato {
  id          String   @id @default(uuid())
  name        String
  cnpj        String   @unique
  address     String?
  city        String?
  state       String?
  zipCode     String?
  phone       String?
  email       String
  website     String?
  description String?
  active      Boolean  @default(true)
  status      SindicatoStatus @default(PENDING)
  approvedAt  DateTime?
  approvedBy  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  adminId     String   @unique
  admin       User     @relation("SindicatoAdmin", fields: [adminId], references: [id])
  membros     Membro[]
  documentos  Documento[]
  convites    Convite[]
  
  @@map("sindicatos")
}


model Membro {
  id          String   @id @default(uuid())
  nome        String
  cpf         String   @unique
  email       String
  telefone    String?
  cargo       String?
  ativo       Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  sindicatoId String
  sindicato   Sindicato @relation(fields: [sindicatoId], references: [id])
  documentos  Documento[]
  
  @@map("membros")
}

model Documento {
  id          String        @id @default(uuid())
  titulo      String
  tipo        DocumentoTipo
  arquivo     String        // URL do Supabase Storage
  tamanho     Int?
  mimeType    String?
  versao      String        @default("1.0")
  ativo       Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relacionamentos
  sindicatoId String
  sindicato   Sindicato @relation(fields: [sindicatoId], references: [id])
  membroId    String?
  membro      Membro?   @relation(fields: [membroId], references: [id])
  
  @@map("documentos")
}

model Convite {
  id          String    @id @default(uuid())
  email       String
  token       String    @unique
  role        UserRole  @default(SINDICATO_ADMIN)
  expiresAt   DateTime
  usado       Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relacionamentos
  sindicatoId String?
  sindicato   Sindicato? @relation(fields: [sindicatoId], references: [id])
  criadoPorId String
  criadoPor   User       @relation("CriadoPor", fields: [criadoPorId], references: [id])
  
  @@map("convites")
}

// Enums
enum UserRole {
  FENAFAR_ADMIN
  SINDICATO_ADMIN
  MEMBER
}

enum SindicatoStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DocumentoTipo {
  CCT      // Convenção Coletiva de Trabalho
  ACT      // Acordo Coletivo de Trabalho
  AVATAR   // Foto de perfil
  OUTRO    // Outros documentos
}