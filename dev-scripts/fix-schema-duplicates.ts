import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function fixSchemaDuplicates() {
  console.log('üöÄ Corrigindo duplicatas e schema do banco de dados...')
  
  try {
    await prisma.$connect()
    console.log('‚úÖ Conectado ao banco de dados')

    // 1. Verificar se tabela membros existe e remov√™-la
    console.log('üìä Verificando tabela membros...')
    const membrosExists = await prisma.$queryRaw`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'membros'
      );
    ` as any[]
    
    if (membrosExists[0]?.exists) {
      console.log('‚ö†Ô∏è  Tabela membros encontrada - ser√° removida')
      console.log('üí° A tabela membros ser√° removida - os dados j√° est√£o em users')
      
      // Remover tabela membros
      console.log('üóëÔ∏è Removendo tabela membros...')
      await prisma.$executeRaw`DROP TABLE "membros" CASCADE;`
      console.log('‚úÖ Tabela membros removida')
    } else {
      console.log('‚úÖ Tabela membros j√° foi removida')
    }

    // 3. Adicionar coluna maxMembers na tabela sindicatos se n√£o existir
    console.log('üîß Adicionando coluna maxMembers em sindicatos...')
    await prisma.$executeRaw`
      ALTER TABLE "sindicatos" 
      ADD COLUMN IF NOT EXISTS "maxMembers" INTEGER;
    `
    console.log('‚úÖ Coluna maxMembers adicionada')

    // 4. Adicionar coluna maxMembers na tabela convites se n√£o existir
    console.log('üîß Adicionando coluna maxMembers em convites...')
    await prisma.$executeRaw`
      ALTER TABLE "convites" 
      ADD COLUMN IF NOT EXISTS "maxMembers" INTEGER;
    `
    console.log('‚úÖ Coluna maxMembers adicionada')

    // 5. Corrigir relacionamento documentos - remover membroId e adicionar userId
    console.log('üîß Corrigindo relacionamentos em documentos...')
    
    // Primeiro, adicionar userId se n√£o existir
    await prisma.$executeRaw`
      ALTER TABLE "documentos" 
      ADD COLUMN IF NOT EXISTS "userId" TEXT;
    `
    
    // Adicionar foreign key para users (sem IF NOT EXISTS)
    try {
      await prisma.$executeRaw`
        ALTER TABLE "documentos" 
        ADD CONSTRAINT "documentos_userId_fkey" 
        FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE SET NULL ON UPDATE CASCADE;
      `
    } catch (error: any) {
      if (error.message.includes('already exists')) {
        console.log('‚úÖ Foreign key j√° existe')
      } else {
        throw error
      }
    }
    
    // Remover membroId se existir
    await prisma.$executeRaw`
      ALTER TABLE "documentos" 
      DROP COLUMN IF EXISTS "membroId";
    `
    
    console.log('‚úÖ Relacionamentos de documentos corrigidos')

    // 6. Verificar tabelas duplicadas
    console.log('üîç Verificando tabelas duplicadas...')
    
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name;
    ` as any[]
    
    console.log('üìã Tabelas encontradas:')
    tables.forEach(table => {
      console.log(`  - ${table.table_name}`)
    })

    // 7. Verificar dados nas tabelas
    console.log('üìä Verificando dados nas tabelas...')
    
    const userCount = await prisma.user.count()
    const sindicatoCount = await prisma.sindicato.count()
    const conviteCount = await prisma.convite.count()
    const documentoCount = await prisma.documento.count()
    
    console.log(`üìà Contadores:`)
    console.log(`  - Users: ${userCount}`)
    console.log(`  - Sindicatos: ${sindicatoCount}`)
    console.log(`  - Convites: ${conviteCount}`)
    console.log(`  - Documentos: ${documentoCount}`)

    console.log('‚úÖ Schema corrigido com sucesso!')
    console.log('üéØ Pr√≥ximos passos:')
    console.log('  1. Atualizar APIs para usar o novo schema')
    console.log('  2. Corrigir formul√°rios de convites')
    console.log('  3. Implementar visualiza√ß√£o e reenvio de convites')

  } catch (error) {
    console.error('‚ùå Erro ao corrigir schema:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  fixSchemaDuplicates()
    .catch((error) => {
      console.error('Falha na corre√ß√£o:', error)
      process.exit(1)
    })
}

export { fixSchemaDuplicates }
