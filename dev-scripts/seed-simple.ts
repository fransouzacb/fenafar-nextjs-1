#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client'
import { config } from 'dotenv'

// Carregar vari√°veis de ambiente
config({ path: '.env.local' })

// Usar URL direta sem pooling para migra√ß√µes
const DATABASE_URL = process.env.DATABASE_URL?.replace('6543', '5432').replace('&pgbouncer=true', '')

if (!DATABASE_URL) {
  console.error('‚ùå DATABASE_URL n√£o encontrada!')
  process.exit(1)
}

console.log('üîß Usando URL direta:', DATABASE_URL.replace(/:[^:@]*@/, ':****@'))

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: DATABASE_URL,
    },
  },
})

async function createSampleData() {
  console.log('üöÄ Criando dados de exemplo...\n')
  
  try {
    // Limpar dados existentes (se existirem)
    console.log('üßπ Limpando dados existentes...')
    try {
      await prisma.convite.deleteMany()
      await prisma.documento.deleteMany()
      await prisma.user.updateMany({
        data: { sindicatoId: null }
      })
      await prisma.sindicato.deleteMany()
      await prisma.user.deleteMany()
      console.log('‚úÖ Dados limpos')
    } catch (error) {
      console.log('‚ö†Ô∏è Tabelas podem n√£o existir ainda, continuando...')
    }
    
    // 1. Criar usu√°rio admin FENAFAR
    console.log('üë§ Criando usu√°rio admin FENAFAR...')
    const adminUser = await prisma.user.create({
      data: {
        id: '123e4567-e89b-12d3-a456-426614174000', // ID fixo para testes
        email: 'admin@fenafar.com.br',
        name: 'Administrador FENAFAR',
        role: 'FENAFAR_ADMIN',
        emailConfirmed: true,
        active: true
      }
    })
    console.log('‚úÖ Admin FENAFAR criado:', adminUser.email)
    
    // 2. Criar sindicato de exemplo
    console.log('üè¢ Criando sindicato de exemplo...')
    const sindicato = await prisma.sindicato.create({
      data: {
        name: 'Sindicato dos Farmac√™uticos de S√£o Paulo',
        cnpj: '12.345.678/0001-90',
        email: 'contato@sindfarmsp.com.br',
        address: 'Rua das Flores, 123',
        city: 'S√£o Paulo',
        state: 'SP',
        zipCode: '01234-567',
        phone: '(11) 1234-5678',
        website: 'https://sindfarmsp.com.br',
        description: 'Sindicato representativo dos farmac√™uticos da regi√£o metropolitana de S√£o Paulo',
        active: true
      }
    })
    console.log('‚úÖ Sindicato criado:', sindicato.name)
    
    // 3. Criar usu√°rio admin do sindicato
    console.log('üë§ Criando admin do sindicato...')
    const sindicatoAdmin = await prisma.user.create({
      data: {
        id: '123e4567-e89b-12d3-a456-426614174001', // ID fixo para testes
        email: 'admin@sindfarmsp.com.br',
        name: 'Jo√£o Silva',
        role: 'SINDICATO_ADMIN',
        emailConfirmed: true,
        active: true,
        sindicatoId: sindicato.id,
        cpf: '123.456.789-01',
        cargo: 'Presidente'
      }
    })
    console.log('‚úÖ Admin sindicato criado:', sindicatoAdmin.email)
    
    // 4. Criar membro do sindicato
    console.log('üë§ Criando membro do sindicato...')
    const membro = await prisma.user.create({
      data: {
        id: '123e4567-e89b-12d3-a456-426614174002', // ID fixo para testes
        email: 'membro@sindfarmsp.com.br',
        name: 'Maria Santos',
        role: 'MEMBER',
        emailConfirmed: true,
        active: true,
        cpf: '987.654.321-01',
        cargo: 'Farmac√™utica'
      }
    })
    console.log('‚úÖ Membro criado:', membro.email)
    
    // 5. Criar documento de exemplo
    console.log('üìÑ Criando documento de exemplo...')
    const documento = await prisma.documento.create({
      data: {
        name: 'Conven√ß√£o Coletiva de Trabalho 2024',
        tipo: 'CCT',
        description: 'Conven√ß√£o Coletiva de Trabalho dos Farmac√™uticos para o ano de 2024',
        fileUrl: 'https://exemplo.com/cct-2024.pdf',
        fileSize: 2048000,
        mimeType: 'application/pdf',
        sindicatoId: sindicato.id,
        active: true
      }
    })
    console.log('‚úÖ Documento criado:', documento.name)
    
    // 6. Criar convite de exemplo
    console.log('‚úâÔ∏è Criando convite de exemplo...')
    const convite = await prisma.convite.create({
      data: {
        email: 'novo-sindicato@exemplo.com.br',
        role: 'SINDICATO_ADMIN',
        sindicatoId: null, // Convite para criar novo sindicato
        invitedBy: adminUser.id,
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 dias
        active: true
      }
    })
    console.log('‚úÖ Convite criado para:', convite.email)
    
    console.log('\nüéâ Dados de exemplo criados com sucesso!')
    console.log('\nüìä Resumo:')
    console.log(`‚úÖ 1 Admin FENAFAR: ${adminUser.email}`)
    console.log(`‚úÖ 1 Sindicato: ${sindicato.name}`)
    console.log(`‚úÖ 1 Admin Sindicato: ${sindicatoAdmin.email}`)
    console.log(`‚úÖ 1 Membro: ${membro.email}`)
    console.log(`‚úÖ 1 Documento: ${documento.name}`)
    console.log(`‚úÖ 1 Convite: ${convite.email}`)
    
    console.log('\nüîë Credenciais para teste:')
    console.log('Admin FENAFAR: admin@fenafar.com.br / admin123')
    console.log('Admin Sindicato: admin@sindfarmsp.com.br / admin123')
    console.log('Membro: membro@sindfarmsp.com.br / membro123')
    
  } catch (error) {
    console.error('‚ùå Erro ao criar dados:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  createSampleData()
    .then(() => {
      console.log('\n‚úÖ Processo conclu√≠do!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Erro:', error)
      process.exit(1)
    })
}

export default createSampleData